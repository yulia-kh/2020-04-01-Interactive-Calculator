{"version":3,"sources":["components/Activities.js","components/Form.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","console","log","this","props","activities","sleep","className","exercise","meals","reading","other","React","Component","Form","state","handleOnChange","e","setState","target","name","value","handleSubmit","ev","preventDefault","onSubmit","htmlFor","type","id","required","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPAEqBA,E,uKAGfC,QAAQC,IAAIC,KAAKC,MAAMC,YACvB,IAAMA,EAAaF,KAAKC,MAAMC,WAEhC,OACE,6BACE,iDACqB,IAApBA,EAAWC,OAAeD,EAC3B,wBAAIE,UAAU,cACZ,wBAAIA,UAAU,cAAcF,EAAWC,OACvC,wBAAIC,UAAU,iBAAiBF,EAAWG,UAC1C,wBAAID,UAAU,cAAcF,EAAWI,OACvC,wBAAIF,UAAU,gBAAgBF,EAAWK,SACzC,wBAAIH,UAAU,cAAcF,EAAWM,QAEzC,wD,GAjB4BC,IAAMC,WCCrBC,E,4MACnBC,MAAQ,CACNT,MAAO,GACPE,SAAU,GACVC,MAAO,GACPC,QAAS,GACTC,MAAO,I,EAGTK,eAAiB,SAAAC,GACf,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAI9BC,aAAe,SAAAC,GACbA,EAAGC,iBAEH,EAAKN,SAAS,CACZZ,MAAO,EAAKS,MAAMT,MAClBE,SAAU,EAAKO,MAAMP,SACrBC,MAAO,EAAKM,MAAMN,MAClBC,QAAS,EAAKK,MAAML,QACpBC,MAAO,EAAKI,MAAMJ,S,uDAMpB,OACE,6BACA,0BAAMJ,UAAU,OAAOkB,SAAUtB,KAAKmB,cACrC,8DACA,2BAAOI,QAAQ,SAAf,+CACA,2BAAOC,KAAK,OAAOC,GAAG,QAAQR,KAAK,QAAQS,UAAQ,EAACC,SAAU3B,KAAKa,eAAgBK,MAAOlB,KAAKY,MAAMT,QACrG,2BAAOoB,QAAQ,YAAf,oDACA,2BAAOC,KAAK,OAAOC,GAAG,WAAWR,KAAK,WAAWS,UAAQ,EAACC,SAAU3B,KAAKa,eAAgBK,MAAOlB,KAAKY,MAAMP,WAC3G,2BAAOkB,QAAQ,SAAf,oDACA,2BAAOC,KAAK,OAAOC,GAAG,QAAQR,KAAK,QAAQS,UAAQ,EAACC,SAAU3B,KAAKa,eAAgBK,MAAOlB,KAAKY,MAAMN,QACrG,2BAAOiB,QAAQ,WAAf,gDACA,2BAAOC,KAAK,OAAOC,GAAG,UAAUR,KAAK,UAAUS,UAAQ,EAACC,SAAU3B,KAAKa,eAAgBK,MAAOlB,KAAKY,MAAML,UACzG,2BAAOgB,QAAQ,SAAf,iCACA,2BAAOC,KAAK,OAAOC,GAAG,QAAQR,KAAK,QAAQS,UAAQ,EAACC,SAAU3B,KAAKa,eAAgBK,MAAOlB,KAAKY,MAAMJ,QACrG,4BAAQgB,KAAK,UAAb,mBAED,kBAAC,EAAD,CAAYtB,WAAYF,KAAKY,a,GA7CDH,IAAMC,WCDnBb,E,uKAEjB,OACE,4BAAQO,UAAU,cAChB,kF,GAJ4BK,IAAMC,WCgB3BkB,E,uKAXX,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,MACA,8BACE,kBAAC,EAAD,Y,GANQK,IAAMC,WCOJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,a","file":"static/js/main.fcf33291.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Navbar extends React.Component {\n\n  render() {\n      console.log(this.props.activities)\n      const activities = this.props.activities;\n\n    return (\n      <div>\n        <h1>Look at your day!</h1>\n        {activities.sleep != '' && activities ? \n        <ul className='activities'>\n          <li className='sleepBasis'>{activities.sleep}</li>\n          <li className='exerciseBasis'>{activities.exercise}</li>\n          <li className='mealsBasis'>{activities.meals}</li>\n          <li className='readingBasis'>{activities.reading}</li>\n          <li className='otherBasis'>{activities.other}</li>\n        </ul> :\n        <div>Submit form to see</div>}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Activities from './Activities';\n\nexport default class Form extends React.Component {\n  state = {\n    sleep: '',\n    exercise: '',\n    meals: '',\n    reading: '',\n    other: ''\n  }\n\n  handleOnChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleSubmit = ev => {\n    ev.preventDefault();\n    \n    this.setState({\n      sleep: this.state.sleep,\n      exercise: this.state.exercise,\n      meals: this.state.meals,\n      reading: this.state.reading,\n      other: this.state.other\n    })\n\n  }\n\n  render() {\n    return (\n      <div>\n      <form className=\"Form\" onSubmit={this.handleSubmit}>\n       <legend>Tell us what you did today</legend>\n       <label htmlFor='sleep'>How many hours of sleep did you have today?</label>\n       <input type='text' id='sleep' name='sleep' required onChange={this.handleOnChange} value={this.state.sleep}></input>\n       <label htmlFor='exercise'>How many minutes of exercise did you have today?</label>\n       <input type='text' id='exercise' name='exercise' required onChange={this.handleOnChange} value={this.state.exercise}></input>\n       <label htmlFor='meals'>How much time in minutes you spent eating today?</label>\n       <input type='text' id='meals' name='meals' required onChange={this.handleOnChange} value={this.state.meals}></input>\n       <label htmlFor='reading'>How much time in minutes did you read today?</label>\n       <input type='text' id='reading' name='reading' required onChange={this.handleOnChange} value={this.state.reading}></input>\n       <label htmlFor='other'>How much time left untracked?</label>\n       <input type='text' id='other' name='other' required onChange={this.handleOnChange} value={this.state.other}></input>\n       <button type='submit'>Submit answers</button>\n      </form>\n      <Activities activities={this.state} />\n      </div>\n    );\n  }\n}","import React from 'react';\n\nexport default class Navbar extends React.Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <h1>Track you activities! Be self-aware, be cool!</h1>\n      </header>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Navbar from './components/Navbar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <main>\n          <Form />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}